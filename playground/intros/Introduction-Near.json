{"html":"<p><img src=\"logos/near.png\" alt=\"NEAR logo\" height=\"150\" width=\"107\"></p>\n<p>NEAR Protocol is a public blockchain and smart contract platform built to host high-throughput decentralized applications. It uses an sharding to scale the network and improve the overall user experience. NEAR, of the same name, is the native currency that holders can use to pay the costs associated with deploying applications or submitting transactions. The NEAR token also plays a central role in the platform&#39;s Proof-of-Stake consensus mechanism, where participants can stake tokens on the network to increase its cost of attack. Similar to Ethereum, the concept of gas is also used to pay for computation and mitigate spam. Accounts also pay storage rent which accumulates over time and is charged once the account submits a transaction for processing. Storage rent is charged for data and also as a tax on short account names to discourage name squatting.</p>\n<p>In a block, transactions are split into chunks, one chunk per shard. A block is the accumulation of all chunks. Chunks are validated by nodes that maintain the state of that shard. Each logical block will theoretically contain all transactions for all shards. Each network participant maintains the state that corresponds to the shards that they validate transactions for and any additional shard that they want to track, since transmitting a logical block across the network would be expensive.</p>\n<p>For consensus, once a block producer publishes a block, they collect the signatures of the validator nodes, then the weight of a block is determined by the cumulative stake of all the signers whose signatures are included in the block. Thus, consensus is based on the heaviest chain, as the weight of a chain is the sum of the block weights. Additionally, the consensus utilizes the Nightshade Finality Gadget, which introduces additional slashing conditions for higher chain security.</p>\n<p><strong>Block Explorer</strong>: <a href=\"https://explorer.near.org/\" target=\"_blank\">https://explorer.near.org/</a></p>\n<p><strong>Addresses</strong>: Uses readable account IDs instead of a hash of a public key. Account IDs contain a minimum length of 2 with maximum length of 64. Account ID consists of Account ID parts separated by &quot;.&quot; and each part consists of lowercase alphanumeric symbols separated by either _ or -.\nExample: <code>app.ayobuenavista</code></p>\n<p><strong>Consensus</strong>: Sharded Proof-of-Stake with blocks constructed with a gadget called Doomslug and a slower finality gadget called Nightshade Finality Gadget.</p>\n<p><strong>NEAR Supply</strong>: No hard cap on the total supply.</p>\n<p><strong>Smart Contracts</strong>: Contracts compile down to WebAssembly (.wasm), which is a binary instruction format for a stack-based virtual machine, that are run on a WebAssembly virtual machine. You can therefore use any language that can compile to wasm, but the recommended to use is Rust.</p>\n<p>Example contract code:</p>\n<pre class='language-rust'><code><span class=\"token comment\">/**\n* Fungible Token implementation with JSON serialization.\n* NOTES:\n*  - The maximum balance value is limited by U128 (2**128 - 1).\n*  - JSON calls should pass U128 as a base-10 string. E.g. \"100\".\n*  - The contract optimizes the inner trie structure by hashing account IDs. It will prevent some\n*    abuse of deep tries. Shouldn't be an issue, once NEAR clients implement full hashing of keys.\n*  - This contract doesn't optimize the amount of storage, since any account can create unlimited\n*    amount of allowances to other accounts. It's unclear how to address this issue unless, this\n*    contract limits the total number of different allowances possible at the same time.\n*    And even if it limits the total number, it's still possible to transfer small amounts to\n*    multiple accounts.\n*/</span>\n<span class=\"token keyword\">use</span> borsh<span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span>BorshDeserialize<span class=\"token punctuation\">,</span> BorshSerialize<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> near_sdk<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span>Map<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> near_sdk<span class=\"token punctuation\">::</span>json_types<span class=\"token punctuation\">::</span>U128<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> near_sdk<span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">,</span> near_bindgen<span class=\"token punctuation\">,</span> AccountId<span class=\"token punctuation\">,</span> Balance<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[global_allocator]</span>\n<span class=\"token keyword\">static</span> ALLOC<span class=\"token punctuation\">:</span> wee_alloc<span class=\"token punctuation\">::</span>WeeAlloc <span class=\"token operator\">=</span> wee_alloc<span class=\"token punctuation\">::</span>WeeAlloc<span class=\"token punctuation\">::</span>INIT<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/// Contains balance and allowances information for one account.</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> Account <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// Current account balance.</span>\n    <span class=\"token keyword\">pub</span> balance<span class=\"token punctuation\">:</span> Balance<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">/// Escrow Account ID hash to the allowance amount.</span>\n    <span class=\"token comment\">/// Allowance is the amount of tokens the Escrow Account ID can spent on behalf of the account</span>\n    <span class=\"token comment\">/// owner.</span>\n    <span class=\"token keyword\">pub</span> allowances<span class=\"token punctuation\">:</span> Map<span class=\"token operator\">&lt;</span>Vec<span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Balance<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> Account <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// Initializes a new Account with 0 balance and no allowances for a given `account_hash`.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>account_hash<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n            balance<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            allowances<span class=\"token punctuation\">:</span> Map<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>account_hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Sets allowance for account `escrow_account_id` to `allowance`.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set_allowance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> escrow_account_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>AccountId<span class=\"token punctuation\">,</span> allowance<span class=\"token punctuation\">:</span> Balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> escrow_hash <span class=\"token operator\">=</span> env<span class=\"token punctuation\">::</span><span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>escrow_account_id<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> allowance <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>allowances<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>escrow_hash<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>allowance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>allowances<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>escrow_hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Returns the allowance of account `escrow_account_id`.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_allowance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> escrow_account_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>AccountId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Balance <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> escrow_hash <span class=\"token operator\">=</span> env<span class=\"token punctuation\">::</span><span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>escrow_account_id<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>allowances<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>escrow_hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token attribute attr-name\">#[derive(BorshDeserialize, BorshSerialize)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> FungibleToken <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// sha256(AccountID) -> Account details.</span>\n    <span class=\"token keyword\">pub</span> accounts<span class=\"token punctuation\">:</span> Map<span class=\"token operator\">&lt;</span>Vec<span class=\"token operator\">&lt;</span><span class=\"token keyword\">u8</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Account<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">/// Total supply of the all token.</span>\n    <span class=\"token keyword\">pub</span> total_supply<span class=\"token punctuation\">:</span> Balance<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> Default <span class=\"token keyword\">for</span> FungibleToken <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fun token should be initialized before usage\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[near_bindgen]</span>\n<span class=\"token keyword\">impl</span> FungibleToken <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// Initializes the contract with the given total supply owned by the given `owner_id`.</span>\n    <span class=\"token attribute attr-name\">#[init]</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>owner_id<span class=\"token punctuation\">:</span> AccountId<span class=\"token punctuation\">,</span> total_supply<span class=\"token punctuation\">:</span> U128<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> total_supply <span class=\"token operator\">=</span> total_supply<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert!</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">::</span>state_read<span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">Self</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is_none</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Already initialized\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> ft <span class=\"token operator\">=</span> <span class=\"token keyword\">Self</span> <span class=\"token punctuation\">{</span>\n            accounts<span class=\"token punctuation\">:</span> Map<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"a\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            total_supply<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> account <span class=\"token operator\">=</span> ft<span class=\"token punctuation\">.</span><span class=\"token function\">get_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>owner_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">=</span> total_supply<span class=\"token punctuation\">;</span>\n        ft<span class=\"token punctuation\">.</span><span class=\"token function\">set_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>owner_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ft\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Sets the `allowance` for `escrow_account_id` on the account of the caller of this contract</span>\n    <span class=\"token comment\">/// (`predecessor_id`) who is the balance owner.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set_allowance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> escrow_account_id<span class=\"token punctuation\">:</span> AccountId<span class=\"token punctuation\">,</span> allowance<span class=\"token punctuation\">:</span> U128<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> allowance <span class=\"token operator\">=</span> allowance<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> owner_id <span class=\"token operator\">=</span> env<span class=\"token punctuation\">::</span><span class=\"token function\">predecessor_account_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> escrow_account_id <span class=\"token operator\">==</span> owner_id <span class=\"token punctuation\">{</span>\n            env<span class=\"token punctuation\">::</span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"Can't set allowance for yourself\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>owner_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        account<span class=\"token punctuation\">.</span><span class=\"token function\">set_allowance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>escrow_account_id<span class=\"token punctuation\">,</span> allowance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>owner_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Transfers the `amount` of tokens from `owner_id` to the `new_owner_id`.</span>\n    <span class=\"token comment\">/// Requirements:</span>\n    <span class=\"token comment\">/// * `amount` should be a positive integer.</span>\n    <span class=\"token comment\">/// * `owner_id` should have balance on the account greater or equal than the transfer `amount`.</span>\n    <span class=\"token comment\">/// * If this function is called by an escrow account (`owner_id != predecessor_account_id`),</span>\n    <span class=\"token comment\">///   then the allowance of the caller of the function (`predecessor_account_id`) on</span>\n    <span class=\"token comment\">///   the account of `owner_id` should be greater or equal than the transfer `amount`.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">transfer_from</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> owner_id<span class=\"token punctuation\">:</span> AccountId<span class=\"token punctuation\">,</span> new_owner_id<span class=\"token punctuation\">:</span> AccountId<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">:</span> U128<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> amount <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> amount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            env<span class=\"token punctuation\">::</span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"Can't transfer 0 tokens\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Retrieving the account from the state.</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>owner_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Checking and updating unlocked balance</span>\n        <span class=\"token keyword\">if</span> account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">&lt;</span> amount <span class=\"token punctuation\">{</span>\n            env<span class=\"token punctuation\">::</span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"Not enough balance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// If transferring by escrow, need to check and update allowance.</span>\n        <span class=\"token keyword\">let</span> escrow_account_id <span class=\"token operator\">=</span> env<span class=\"token punctuation\">::</span><span class=\"token function\">predecessor_account_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> escrow_account_id <span class=\"token operator\">!=</span> owner_id <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> allowance <span class=\"token operator\">=</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">get_allowance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>escrow_account_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> allowance <span class=\"token operator\">&lt;</span> amount <span class=\"token punctuation\">{</span>\n                env<span class=\"token punctuation\">::</span><span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">b\"Not enough allowance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            account<span class=\"token punctuation\">.</span><span class=\"token function\">set_allowance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>escrow_account_id<span class=\"token punctuation\">,</span> allowance <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Saving the account back to the state.</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>owner_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Deposit amount to the new owner and save the new account to the state.</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> new_account <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>new_owner_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        new_account<span class=\"token punctuation\">.</span>balance <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>new_owner_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>new_account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Transfer `amount` of tokens from the caller of the contract (`predecessor_id`) to</span>\n    <span class=\"token comment\">/// `new_owner_id`.</span>\n    <span class=\"token comment\">/// Act the same was as `transfer_from` with `owner_id` equal to the caller of the contract</span>\n    <span class=\"token comment\">/// (`predecessor_id`).</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> new_owner_id<span class=\"token punctuation\">:</span> AccountId<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">:</span> U128<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer_from</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">::</span><span class=\"token function\">predecessor_account_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> new_owner_id<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Returns total supply of tokens.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_total_supply</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> U128 <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>total_supply<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Returns balance of the `owner_id` account.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_balance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> owner_id<span class=\"token punctuation\">:</span> AccountId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> U128 <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>owner_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Returns current allowance of `escrow_account_id` for the account of `owner_id`.</span>\n    <span class=\"token comment\">///</span>\n    <span class=\"token comment\">/// NOTE: Other contracts should not rely on this information, because by the moment a contract</span>\n    <span class=\"token comment\">/// receives this information, the allowance may already be changed by the owner.</span>\n    <span class=\"token comment\">/// So this method should only be used on the front-end to see the current allowance.</span>\n    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_allowance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> owner_id<span class=\"token punctuation\">:</span> AccountId<span class=\"token punctuation\">,</span> escrow_account_id<span class=\"token punctuation\">:</span> AccountId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> U128 <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>owner_id<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">get_allowance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>escrow_account_id<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> FungibleToken <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// Helper method to get the account details for `owner_id`.</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> owner_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>AccountId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Account <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> account_hash <span class=\"token operator\">=</span> env<span class=\"token punctuation\">::</span><span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>owner_id<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>accounts\n            <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>account_hash<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_or_else</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> Account<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>account_hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// Helper method to set the account details for `owner_id` to the state.</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">set_account</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> owner_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>AccountId<span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>Account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> account_hash <span class=\"token operator\">=</span> env<span class=\"token punctuation\">::</span><span class=\"token function\">sha256</span><span class=\"token punctuation\">(</span>owner_id<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>accounts<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>account_hash<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[cfg(not(target_arch = <span class=\"token string\">\"wasm32\"</span>))]</span>\n<span class=\"token attribute attr-name\">#[cfg(test)]</span>\n<span class=\"token keyword\">mod</span> tests <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> near_sdk<span class=\"token punctuation\">::</span>MockedBlockchain<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">use</span> near_sdk<span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span>testing_env<span class=\"token punctuation\">,</span> VMContext<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">use</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">::</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">alice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> AccountId <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"alice.near\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> AccountId <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"bob.near\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> AccountId <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"carol.near\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">catch_unwind_silent</span><span class=\"token operator\">&lt;</span>F<span class=\"token punctuation\">:</span> FnOnce<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> R <span class=\"token operator\">+</span> std<span class=\"token punctuation\">::</span>panic<span class=\"token punctuation\">::</span>UnwindSafe<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        f<span class=\"token punctuation\">:</span> F<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> std<span class=\"token punctuation\">::</span>thread<span class=\"token punctuation\">::</span>Result<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> prev_hook <span class=\"token operator\">=</span> std<span class=\"token punctuation\">::</span>panic<span class=\"token punctuation\">::</span><span class=\"token function\">take_hook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token punctuation\">::</span>panic<span class=\"token punctuation\">::</span><span class=\"token function\">set_hook</span><span class=\"token punctuation\">(</span>Box<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>_<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> std<span class=\"token punctuation\">::</span>panic<span class=\"token punctuation\">::</span><span class=\"token function\">catch_unwind</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token punctuation\">::</span>panic<span class=\"token punctuation\">::</span><span class=\"token function\">set_hook</span><span class=\"token punctuation\">(</span>prev_hook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">get_context</span><span class=\"token punctuation\">(</span>predecessor_account_id<span class=\"token punctuation\">:</span> AccountId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> VMContext <span class=\"token punctuation\">{</span>\n        VMContext <span class=\"token punctuation\">{</span>\n            current_account_id<span class=\"token punctuation\">:</span> <span class=\"token function\">alice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            signer_account_id<span class=\"token punctuation\">:</span> <span class=\"token function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            signer_account_pk<span class=\"token punctuation\">:</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            predecessor_account_id<span class=\"token punctuation\">,</span>\n            input<span class=\"token punctuation\">:</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            block_index<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            block_timestamp<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            account_balance<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            account_locked_balance<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            storage_usage<span class=\"token punctuation\">:</span> <span class=\"token number\">10u64</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            attached_deposit<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            prepaid_gas<span class=\"token punctuation\">:</span> <span class=\"token number\">10u64</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            random_seed<span class=\"token punctuation\">:</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            is_view<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            output_data_receivers<span class=\"token punctuation\">:</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            epoch_height<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token function\">get_context</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">testing_env!</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> total_supply <span class=\"token operator\">=</span> 1_000_000_000_000_000u128<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> contract <span class=\"token operator\">=</span> FungibleToken<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> total_supply<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span><span class=\"token function\">get_total_supply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total_supply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span><span class=\"token function\">get_balance</span><span class=\"token punctuation\">(</span><span class=\"token function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total_supply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_transfer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token function\">get_context</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">testing_env!</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> total_supply <span class=\"token operator\">=</span> 1_000_000_000_000_000u128<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> contract <span class=\"token operator\">=</span> FungibleToken<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> total_supply<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> transfer_amount <span class=\"token operator\">=</span> total_supply <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        contract<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transfer_amount<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>\n            contract<span class=\"token punctuation\">.</span><span class=\"token function\">get_balance</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">(</span>total_supply <span class=\"token operator\">-</span> transfer_amount<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span><span class=\"token function\">get_balance</span><span class=\"token punctuation\">(</span><span class=\"token function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> transfer_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_self_allowance_fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token function\">get_context</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">testing_env!</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> total_supply <span class=\"token operator\">=</span> 1_000_000_000_000_000u128<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> contract <span class=\"token operator\">=</span> FungibleToken<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> total_supply<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">catch_unwind_silent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            contract<span class=\"token punctuation\">.</span><span class=\"token function\">set_allowance</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>total_supply <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">unwrap_err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token attribute attr-name\">#[test]</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">test_carol_escrows_to_bob_transfers_to_alice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Acting as carol</span>\n        <span class=\"token macro property\">testing_env!</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_context</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> total_supply <span class=\"token operator\">=</span> 1_000_000_000_000_000u128<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> contract <span class=\"token operator\">=</span> FungibleToken<span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> total_supply<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span><span class=\"token function\">get_total_supply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> total_supply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> allowance <span class=\"token operator\">=</span> total_supply <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> transfer_amount <span class=\"token operator\">=</span> allowance <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        contract<span class=\"token punctuation\">.</span><span class=\"token function\">set_allowance</span><span class=\"token punctuation\">(</span><span class=\"token function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> allowance<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span><span class=\"token function\">get_allowance</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> allowance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Acting as bob now</span>\n        <span class=\"token macro property\">testing_env!</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_context</span><span class=\"token punctuation\">(</span><span class=\"token function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contract<span class=\"token punctuation\">.</span><span class=\"token function\">transfer_from</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">alice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transfer_amount<span class=\"token punctuation\">.</span><span class=\"token function\">into</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>\n            contract<span class=\"token punctuation\">.</span><span class=\"token function\">get_balance</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            total_supply <span class=\"token operator\">-</span> transfer_amount\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span><span class=\"token function\">get_balance</span><span class=\"token punctuation\">(</span><span class=\"token function\">alice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> transfer_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>\n            contract<span class=\"token punctuation\">.</span><span class=\"token function\">get_allowance</span><span class=\"token punctuation\">(</span><span class=\"token function\">carol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">bob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            allowance <span class=\"token operator\">-</span> transfer_amount\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>","deeplinks":[],"metadata":{"id":"Introduction-Near"}}