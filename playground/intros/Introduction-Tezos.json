{"html":"<p><img src=\"logos/tezos.png\" alt=\"Tezos logo\" height=\"150\" width=\"187\"></p>\n<p>Tezosis a multi-purpose public blockchain that markets itself as a self-amending protocol based on the idea of a digital commonwealth, in which governance is democratized in an efficient and sustainable manner to avoid costly hard-fork scenarios. It supports the creation of new tokens, smart contracts, and dapps. At its core, Tezos is a system designed to formalize proposing, voting for, and implementing changes to the functionality of the network. XTZ is the token used for all operations. Holders of XTZ can vote with a weighting of one vote per token once a proposal is submitted to the protocol.</p>\n<p>With the incorporation of features such as Liquid Proof-of-Stake and on-chain governance, throughput is traded for a higher level of decentralization. Protocol amendments are adopted over election cycles which are 131,072 blocks long, or roughly three months. Amendments are only voted on by the community, and not by the Tezos Foundation. All stakeholders can participate in protocol governance either directly or indirectly, through delegation. An election cycle provides a procedure for stakeholders to propose amendments and reach an agreement.</p>\n<p>Block generation is referred to as baking while validators are known as bakers. Bakers contribute their computing power to the network to validate transactions. To participate, bakers must own at least 8,000 XTZ (or 1 roll). The more rolls held by a baker, the higher the chance they will bake the next block.</p>\n<p>The self-amendment process is split into four periods: the Proposal Period, Exploration Vote Period, Testing Period and Promotion Vote Period. Each of these four periods lasts eight baking cycles (32,768 blocks), which is approximately three months from proposal to activation.</p>\n<p><strong>Block Explorer</strong>: <a href=\"https://tezblock.io/\" target=\"_blank\">https://tezblock.io/</a></p>\n<p><strong>Addresses</strong>: 32-byte Ed25519 (tz1), Secp256k1 (tz2), or P256 (tz3) key encoded to Base58. There are two types of addresses: implicit and smart contracts. Implicit addresses have tz1, tz2, tz3 prefixes. Smart contracts use kT1 prefix and are created with an origination operation.<br />\nExample: <code>tz1RjtZUVeLhADFHDL8UwDZA6vjWWhojpu5w</code></p>\n<p><strong>Block Time</strong>: Targetting 1 minute.</p>\n<p><strong>Consensus</strong>: Emmy+, a Liquid Proof-of-Stake consensus algorithm.</p>\n<p><strong>XTZ Supply</strong>: No hard cap on the total supply.</p>\n<p><strong>Smart Contracts</strong>: Liquidity, a high level typed language that that strictly complies with Michelson security restrictions. Michelson is a stack-based language with high level data types and primitives.</p>\n<p>Example contract code:</p>\n<pre class='language-ocaml'><code><span class=\"token punctuation\">[</span><span class=\"token operator\">%%</span>version <span class=\"token number\">0.4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">(* Smart contract for voting. Winners of vote split the contract\n   balance at the end of the voting period. *)</span>\n\n<span class=\"token comment\">(** Type of storage for this contract *)</span>\n<span class=\"token keyword\">type</span> storage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  voters <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span> big<span class=\"token punctuation\">_</span>map<span class=\"token punctuation\">;</span> <span class=\"token comment\">(** Used to register voters *)</span>\n  votes <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> nat<span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">;</span> <span class=\"token comment\">(** Keep track of vote counts *)</span>\n  addresses <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">_</span>hash<span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">;</span> <span class=\"token comment\">(** Addresses for payout *)</span>\n  deadline <span class=\"token punctuation\">:</span> timestamp<span class=\"token punctuation\">;</span> <span class=\"token comment\">(** Deadline after which vote closes *)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">(** Initial storage *)</span>\n<span class=\"token keyword\">let</span><span class=\"token operator\">%</span>init storage addresses <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">(* Initialize vote counts to zero *)</span>\n  votes <span class=\"token operator\">=</span> <span class=\"token module variable\">Map</span><span class=\"token punctuation\">.</span>fold <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">_</span>kh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n      <span class=\"token module variable\">Map</span><span class=\"token punctuation\">.</span>add name <span class=\"token number\">0</span>p votes\n    <span class=\"token punctuation\">)</span> addresses <span class=\"token module variable\">Map</span><span class=\"token punctuation\">;</span>\n  addresses<span class=\"token punctuation\">;</span>\n  voters <span class=\"token operator\">=</span> <span class=\"token module variable\">BigMap</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">(* No voters *)</span>\n  deadline <span class=\"token operator\">=</span> <span class=\"token module variable\">Current</span><span class=\"token punctuation\">.</span>time <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3600</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token comment\">(* 1 day from now *)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">(** Entry point for voting.\n    @param choice A string corresponding to the candidate *)</span>\n<span class=\"token keyword\">let</span><span class=\"token operator\">%</span>entry vote choice storage <span class=\"token operator\">=</span>\n  <span class=\"token comment\">(* Only allowed while voting period is ongoing *)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token module variable\">Current</span><span class=\"token punctuation\">.</span>time <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> storage<span class=\"token punctuation\">.</span>deadline <span class=\"token keyword\">then</span> failwith <span class=\"token string\">\"Voting closed\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">(* Voter must send at least 5tz to vote *)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token module variable\">Current</span><span class=\"token punctuation\">.</span>amount <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5.00</span>tz <span class=\"token keyword\">then</span>\n    failwith <span class=\"token string\">\"Not enough money, at least 5tz to vote\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">(* Voter cannot vote twice *)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token module variable\">Map</span><span class=\"token punctuation\">.</span>mem <span class=\"token punctuation\">(</span><span class=\"token module variable\">Current</span><span class=\"token punctuation\">.</span>sender <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> storage<span class=\"token punctuation\">.</span>voters <span class=\"token keyword\">then</span>\n    failwith <span class=\"token punctuation\">(</span><span class=\"token string\">\"Has already voted\"</span><span class=\"token punctuation\">,</span> <span class=\"token module variable\">Current</span><span class=\"token punctuation\">.</span>sender <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> votes <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">.</span>votes <span class=\"token keyword\">in</span>\n  <span class=\"token keyword\">match</span> <span class=\"token module variable\">Map</span><span class=\"token punctuation\">.</span>find choice votes <span class=\"token keyword\">with</span>\n  <span class=\"token operator\">|</span> <span class=\"token module variable\">None</span> <span class=\"token operator\">-></span>\n    <span class=\"token comment\">(* Vote must be for an existing candidate *)</span>\n    failwith <span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad vote\"</span><span class=\"token punctuation\">,</span> choice<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span> <span class=\"token module variable\">Some</span> x <span class=\"token operator\">-></span>\n    <span class=\"token comment\">(* Increase vote count for candidate *)</span>\n    <span class=\"token keyword\">let</span> storage <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">.</span>votes <span class=\"token operator\">&lt;-</span> <span class=\"token module variable\">Map</span><span class=\"token punctuation\">.</span>add choice <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>p<span class=\"token punctuation\">)</span> votes <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">(* Register voter *)</span>\n    <span class=\"token keyword\">let</span> storage <span class=\"token operator\">=</span>\n      storage<span class=\"token punctuation\">.</span>voters <span class=\"token operator\">&lt;-</span> <span class=\"token module variable\">Map</span><span class=\"token punctuation\">.</span>add <span class=\"token punctuation\">(</span><span class=\"token module variable\">Current</span><span class=\"token punctuation\">.</span>sender <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> storage<span class=\"token punctuation\">.</span>voters <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">(* Return updated storage *)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> storage<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">(* Auxiliary function : returns the list of candidates with the\n   maximum number of votes (there can be more than one in case of\n   draw). *)</span>\n<span class=\"token keyword\">let</span> find<span class=\"token punctuation\">_</span>winners votes <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">let</span> winners<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">_</span>max <span class=\"token operator\">=</span>\n    <span class=\"token module variable\">Map</span><span class=\"token punctuation\">.</span>fold <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>winners<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n        <span class=\"token keyword\">if</span> nb <span class=\"token operator\">=</span> max <span class=\"token keyword\">then</span>\n          name <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span> winners<span class=\"token punctuation\">,</span> max\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> nb <span class=\"token operator\">></span> max <span class=\"token keyword\">then</span>\n          <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nb\n        <span class=\"token keyword\">else</span> winners<span class=\"token punctuation\">,</span> max\n      <span class=\"token punctuation\">)</span> votes <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n  winners\n\n<span class=\"token comment\">(** Entry point for paying winning candidates. *)</span>\n<span class=\"token keyword\">let</span><span class=\"token operator\">%</span>entry payout <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> storage <span class=\"token operator\">=</span>\n  <span class=\"token comment\">(* Only allowed once voting period is over *)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token module variable\">Current</span><span class=\"token punctuation\">.</span>time <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> storage<span class=\"token punctuation\">.</span>deadline <span class=\"token keyword\">then</span> failwith <span class=\"token string\">\"Voting ongoing\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">(* Indentify winners of vote *)</span>\n  <span class=\"token keyword\">let</span> winners <span class=\"token operator\">=</span> find<span class=\"token punctuation\">_</span>winners storage<span class=\"token punctuation\">.</span>votes <span class=\"token keyword\">in</span>\n  <span class=\"token comment\">(* Balance of contract is split equally between winners *)</span>\n  <span class=\"token keyword\">let</span> amount <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> <span class=\"token module variable\">Current</span><span class=\"token punctuation\">.</span>balance <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>length winners <span class=\"token keyword\">with</span>\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">None</span> <span class=\"token operator\">-></span> failwith <span class=\"token string\">\"No winners\"</span>\n    <span class=\"token operator\">|</span> <span class=\"token module variable\">Some</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">_</span>rem<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> v <span class=\"token keyword\">in</span>\n  <span class=\"token comment\">(* Generate transfer operations *)</span>\n  <span class=\"token keyword\">let</span> operations <span class=\"token operator\">=</span> <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> name <span class=\"token operator\">-></span>\n      <span class=\"token keyword\">let</span> dest <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> <span class=\"token module variable\">Map</span><span class=\"token punctuation\">.</span>find name storage<span class=\"token punctuation\">.</span>addresses <span class=\"token keyword\">with</span>\n        <span class=\"token operator\">|</span> <span class=\"token module variable\">None</span> <span class=\"token operator\">-></span> failwith <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">(* This cannot happen *)</span>\n        <span class=\"token operator\">|</span> <span class=\"token module variable\">Some</span> d <span class=\"token operator\">-></span> d <span class=\"token keyword\">in</span>\n      <span class=\"token module variable\">Account</span><span class=\"token punctuation\">.</span>transfer <span class=\"token label function\">~amount</span> <span class=\"token label function\">~dest</span>\n    <span class=\"token punctuation\">)</span> winners <span class=\"token keyword\">in</span>\n  <span class=\"token comment\">(* Return list of operations. Storage is unchanged *)</span>\n  operations<span class=\"token punctuation\">,</span> storage</code></pre>","deeplinks":[],"metadata":{"id":"Introduction-Tezos"}}